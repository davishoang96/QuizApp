// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.Database;

#nullable disable

namespace QuizApp.Database.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20250103050729_initmigration")]
    partial class initmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("QuizApp.Database.Models.BaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseModel");

                    b.HasDiscriminator().HasValue("BaseModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizApp.Database.Models.Answer", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("SubmissionId");

                    b.HasDiscriminator().HasValue("Answer");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Choice", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<string>("ChoiceTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("QuestionId");

                    b.ToTable("BaseModel", t =>
                        {
                            t.Property("QuestionId")
                                .HasColumnName("Choice_QuestionId");
                        });

                    b.HasDiscriminator().HasValue("Choice");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Question", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<int>("QuizId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("QuizId");

                    b.HasDiscriminator().HasValue("Question");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Quiz", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Quiz");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Submission", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<int>("QuizId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseModel", t =>
                        {
                            t.Property("QuizId")
                                .HasColumnName("Submission_QuizId");
                        });

                    b.HasDiscriminator().HasValue("Submission");
                });

            modelBuilder.Entity("QuizApp.Database.Models.User", b =>
                {
                    b.HasBaseType("QuizApp.Database.Models.BaseModel");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Answer", b =>
                {
                    b.HasOne("QuizApp.Database.Models.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Database.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Database.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("QuizApp.Database.Models.Submission", "Submission")
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Choice", b =>
                {
                    b.HasOne("QuizApp.Database.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Question", b =>
                {
                    b.HasOne("QuizApp.Database.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Submission", b =>
                {
                    b.HasOne("QuizApp.Database.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Database.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizApp.Database.Models.Submission", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizApp.Database.Models.User", b =>
                {
                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
