@page "/add-question/{quizId:int}"
@using QuizApp.Api
@using QuizApp.Common.DTO
@using QuizApp.Common.Request
@using System.Collections.ObjectModel
@inject IQuizApiClient apiClient
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

<h3>
    Add Questions & Answers
</h3>

@if (Questions == null)
{
    <p>Loading...</p>
}
else if (!Questions.Any())
{
    <RadzenText>No question available.</RadzenText>
    <RadzenButton Click="AddNewQuestion">Add question</RadzenButton>
}
else
{
    <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Left">

        <RadzenButton Click="AddNewQuestion">Add question</RadzenButton>

        <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@Questions" TItem="QuestionDTO">
            <Columns>
                <RadzenDataGridColumn Property="Title" Title="Question" Width="300px" />
                <RadzenDataGridColumn Property="Answers" Title="Answers">
                    <Template Context="data">
                        <ul>
                            @foreach (var answer in data.Answers)
                            {
                                <li>
                                    @answer.Text
                                    <span class="badge bg-@(answer.IsCorrect ? "success" : "secondary")">
                                        @(answer.IsCorrect ? "Correct" : "Incorrect")
                                    </span>
                                </li>
                            }
                        </ul>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenButton Click="SaveQuestion">Save</RadzenButton>

    </RadzenStack>
}

@code {
    [Parameter] public int QuizId { get; set; }

    private ObservableCollection<QuestionDTO> Questions = new ObservableCollection<QuestionDTO>();

    private async Task SaveQuestion()
    {
        var result = await apiClient.SaveOrUpdateQuestionAsync(new SaveOrUpdateQuestionRequest
        {
            QuizId = QuizId,
            QuestionDTOs = Questions,
        });

        if(result > 0)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Save questions successfully");
        }
    }

    private async Task AddNewQuestion()
    {
        DialogService.OnClose += AddNewQuestionClosed;
        await DialogService.OpenAsync<AddQuestionDialog>("Add New Question");
    }

    private void AddNewQuestionClosed(dynamic obj)
    {
        var questions = obj as QuestionDTO;
        if (questions is not null)
        {
            Questions.Add(questions);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var questionDTOs = await apiClient.GetQuestionsByQuizIdEndpointAsync(QuizId);

            if(questionDTOs == null)
            {
                return;
            }

            if (questionDTOs.Any())
            {
                Questions = new ObservableCollection<QuestionDTO>(questionDTOs);
            }
            else
            {
                Questions = new ObservableCollection<QuestionDTO>();
            }

            StateHasChanged();
		}
	}
}
