@page "/"
@using QuizApp.Api
@using QuizApp.Common.DTO
@using System.Collections.ObjectModel
@using System.Security.Claims
@using QuizApp.Services
@inject DialogService DialogService;
@inject NavigationManager NavigationManager
@inject IQuizApiClient apiClient
@inject IUserService userService
@attribute [StreamRendering]
<PageTitle>Home</PageTitle>

@if(Quizzes == null)
{
	<p>Loading...</p>
}
else if(!Quizzes.Any())
{
    <h3>Please login to see quizzes</h3>
}
else
{
    <RadzenDataList Data="@Quizzes" TItem="QuizDTO" PageSize="5">
        <Template Context="quiz">
            <RadzenCard Variant="Variant.Flat" class="rz-p-3">
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Start">
                    <h3>@quiz.Name</h3>
                    <RadzenText>@quiz.Description</RadzenText>
                    <RadzenButton Click="@(() => TakeQuiz(quiz.Id.Value))">Take Quiz</RadzenButton>
                </RadzenStack>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code{

	private ObservableCollection<QuizDTO> Quizzes { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    bool sidebar1Expanded = true;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            if (state.User.Identity.IsAuthenticated)
            {
                var userId = state?.User?.Claims.ToList().FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
                var checkUser = await apiClient.IsUserExistedEndpointAsync(userId);
                if (!checkUser)
                {
                    var dto = await userService.CreateUserDTO();
                    var createUserRes = await apiClient.CreateUserEndpointAsync(dto);
                    if (createUserRes < 0)
                    {
                        await DialogService.Alert("User creation failed");
                    }
                }
            }
        }
    }


    private void TakeQuiz(int quizId)
    {
        NavigationManager.NavigateTo($"/take-quiz/{quizId}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (authenticationState is not null)
            {
                var state = await authenticationState;
                if (state.User.Identity.IsAuthenticated)
                {
                    var questionDTOs = await apiClient.GetQuizzesEndpointAsync();
                    if (questionDTOs == null)
                    {
                        return;
                    }

                    if (questionDTOs.Any())
                    {
                        Quizzes = new ObservableCollection<QuizDTO>(questionDTOs);
                    }
                    else
                    {
                        Quizzes = new ObservableCollection<QuizDTO>();
                    }
                }
            }
            StateHasChanged();
        }
    }
}