@page "/take-quiz/{quizId:int}"
@using Blazored.LocalStorage
@using QuizApp.Api
@using QuizApp.Common.DTO
@using QuizApp.Common.Request
@using System.Collections.ObjectModel
@inject IQuizApiClient apiClient
@inject ILocalStorageService localStorage
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@attribute [Authorize]

@if (Questions == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenDataList Data="@Questions" TItem="QuestionDTO">
        <Template Context="question">
            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Start">
                <h3>@question.Title</h3>
                <RadzenRadioButtonList Data="@question.Answers" @bind-value="@question.SelectedAnswerId" TValue="int" TextProperty="Text" ValueProperty="Id" Orientation="Orientation.Vertical" />
            </RadzenStack>
        </Template>
    </RadzenDataList>

    <RadzenButton Click="SubmitQuiz" Style="margin-left: 15px">Submit</RadzenButton>
}

@code {
    [Parameter] public int QuizId { get; set; }

    private List<QuestionDTO> Questions = new List<QuestionDTO>();
    private List<UserAnswerDTO> UserAnswers = new List<UserAnswerDTO>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task SubmitQuiz()
    {
        // Confirm submission
        var confirm = await DialogService.Confirm("Are you sure you want to submit the quiz?", "Submit Quiz");
        if (confirm == false)
        {
            return;
        }

        var currentLoginUserId = await localStorage.GetItemAsync<int>("currentLoginUserId");
        if(currentLoginUserId < 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Cannot find user to submit quiz");
            return;
        }

        foreach (var q in Questions)
        {
            var userAnswer = new UserAnswerDTO
            {
                QuestionId = q.Id,
                SelectedAnswerId = q.SelectedAnswerId
            };
            UserAnswers.Add(userAnswer);
        }

        var userAnswerRequest = new SaveSubmissionRequest
        {
            QuizId = QuizId,
            UserId = currentLoginUserId,
            UserAnswerDTOs = UserAnswers
        };

        var response = await apiClient.SaveSubmissionEndpointAsync(userAnswerRequest);
        if(response != null)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Quiz submitted successfully");
            DialogService.OnClose += OnScorePopupClosed;
            await DialogService.OpenAsync<ScorePopup>("Congratulation!", new Dictionary<string, object> { { "Score", response.Score } });
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to submit quiz");
        }
    }

    private void OnScorePopupClosed(dynamic obj)
    {
        NavigationManager.NavigateTo("/");
    }   

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var questionDTOs = await apiClient.GetQuestionsByQuizIdEndpointAsync(QuizId);

            if (questionDTOs == null)
            {
                return;
            }

            if (questionDTOs.Any())
            {
                Questions = new List<QuestionDTO>(questionDTOs);
                foreach(var a in Questions.SelectMany(s=>s.Answers))
                {
                    a.IsCorrect = false;
                }
            }
            else
            {
                Questions = new List<QuestionDTO>();
            }

            StateHasChanged();
        }
    }
}
