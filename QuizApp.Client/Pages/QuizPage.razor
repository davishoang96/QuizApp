@page "/quizzes"
@using QuizApp.Api
@using QuizApp.Common.DTO
@using System.Collections.ObjectModel
@inject IQuizApiClient apiClient
@inject DialogService DialogService

<h3>Quiz Manager</h3>

<RadzenButton Click="AddNewQuiz">Add Quiz</RadzenButton>

@if (Quizzes == null)
{
    <p>Loading...</p>
}
else if (!Quizzes.Any())
{
    <p>No quizzes available.</p>
}
else
{
    <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@Quizzes" TItem="QuizDTO">
        <Columns>
            <RadzenDataGridColumn Property="@(nameof(QuizDTO.Name))" Title="Name" Width="140px" />
            <RadzenDataGridColumn Property="@(nameof(QuizDTO.Description))" Title="Description" />
            <RadzenDataGridColumn Width="100px" Title="Actions">
                <Template Context="data">
                    <RadzenButton Icon="delete" Class="rz-button rz-danger" Style="margin-left: 5px" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}


@code {
    private ObservableCollection<QuizDTO> Quizzes { get; set; } = new ObservableCollection<QuizDTO>();

    protected override async Task OnInitializedAsync()
    {
        var a = await apiClient.GetQuizzesEndpointAsync();
        Quizzes = new ObservableCollection<QuizDTO>(a);
    }

    private async Task AddNewQuiz()
    {
        DialogService.OnClose += AddNewQuizClosed;
        await DialogService.OpenAsync<AddQuiz>("Add New Quiz");
    }

    private void AddNewQuizClosed(dynamic obj)
    {
        var newQuiz = obj as QuizDTO;
        Quizzes.Add(newQuiz);
        StateHasChanged();
    }

    private void EditQuiz(int quizId)
    {
        var quizToEdit = Quizzes.FirstOrDefault(q => q.Id == quizId);
        if (quizToEdit != null)
        {
            //SaveQuizModal.Show(quizToEdit);
        }
    }

    private async Task DeleteQuiz(int quizId)
    {
        //var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Quiz #{quizId}?");
        // if (confirm)
        // {
        //     //await QuizService.DeleteQuizAsync(quizId);
        //     await ReloadQuizzes();
        // }
    }
}
